{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Events Manager",
    "description": "API documetation for an event management system"
  },
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "UserToken": {
      "type": "apiKey",
      "in": "header",
      "name": "x-access-token"
    }
  },
  "paths": {
    "/users": {
      "post": {
        "tags": ["User"],
        "summary": "User registration",
        "description": "Creates a new user and stores the information to the database.",
        "parameters": [{
          "in": "formData",
          "name": "email",
          "type": "string",
          "format": "email",
          "required": true
        },
        {
          "in": "formData",
          "name": "username",
          "type": "string",
          "required": true
        },
        {
          "in": "formData",
          "name": "password",
          "type": "string",
          "format": "password",
          "required": true
        },
        {
          "in": "formData",
          "name": "confirmPassword",
          "type": "string",
          "format": "password",
          "required": true
        }],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "409": {
            "description": "Username or email taken"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": ["User"],
        "summary": "Gets all event",
        "description": "An admin can get all the events in the database",
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized to view this route"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["User"],
        "summary": "Logs in a user",
        "description": "Authenticates a user by checking if they exists in the database",
        "parameters": [{
          "in": "formData",
          "name": "email",
          "type": "string",
          "format": "email",
          "required": true
        },
        {
          "in": "formData",
          "name": "password",
          "type": "string", 
          "format": "password",
          "required": true
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Incorrect username or email"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/events": {
      "post": {
        "tags": ["Events"],
        "summary": "Creates a new event",
        "description": "Creates a new events and stores it to the database.",
        "security": [{
          "UserToken": []
        }],
        "parameters": [{
          "in": "formData",
          "name": "title",
          "type": "string",
          "required": true
        },
        {
          "in": "formData",
          "name": "notes",
          "type": "string",
          "required": false
        },
        {
          "in": "formData",
          "name": "centerId",
          "type": "string",
          "format": "number",
          "required": true
        },
        {
          "in": "formData",
          "name": "date",
          "type": "string",
          "format": "date",
          "required": true
        }],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Center not found"
          },
          "409": {
            "description": "Conflict, Center is already booked"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "users/auth/events": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets all my events",
        "description": "Gets all events created by this user",
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No event found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "users/auth/events/{eventId}": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets one of my events",
        "description": "Gets the details of one of the events created by this user",
        "security": [{
          "UserToken": []
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request - input or parameter"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Event does not exist"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/events/{eventId}": {
      "put": {
        "tags": ["Events"],
        "summary": "Updates an event",
        "description": "Updates an existing event in the database.",
        "security": [{
          "UserToken": []
        }],
        "parameters": [{
          "name": "eventId",
          "in": "path",
          "type": "integer",
          "description": "The event to update.",
          "schema": {
            "$ref": "#/definitions/Event"
          }
          },
          {
            "in": "formData",
            "name": "title",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "notes",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "centerId",
            "type": "string",
            "format": "number",
            "required": true
          },
          {
            "in": "formData",
            "name": "date",
            "type": "string",
            "format": "date",
            "required": true
          }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - input or param"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized - Can't update another user's events"
          },
          "404": {
            "description": "Didn't find event to be updated"
          },
          "409": {
            "description": "Center already booked"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Delete an event",
        "description": "Delete an existing event from the database.",
        "security": [{
          "UserToken": []
        }],
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The event to delete."
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - param"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized - Can't delete another user's events"
          },
          "404": {
            "description": "Didn't find event to be deleted"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/centers": {
      "post": {
        "tags": ["Centers"],
        "summary": "Creates a center",
        "description": "Admin creates a new center and stores to the database.",
        "security": [{
          "UserToken": []
        }],
        "parameters": [{
          "in": "formData",
          "name": "name",
          "type": "string",
          "required": true
        },
        {
          "in": "formData",
          "name": "loaction",
          "type": "string",
          "required": true
        },
        {
          "in": "formData",
          "name": "price",
          "type": "string",
          "format": "number",
          "required": true
        },
        {
          "in": "formData",
          "name": "capacity",
          "type": "string",
          "format": "number",
          "required": true
        },
        {
          "in": "formData",
          "name": "image",
          "type": "file",
          "required": true
        }],
        "responses": {
          "201": {
            "description": "Center created"
          },
          "400": {
            "description": "Bad Request - input"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized - must be an admin"
          },
          "409": {
            "description": "Center already exists"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": ["Centers"],
        "summary": "Gets all center",
        "description": "Gets all centers from the database",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "No center found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/centers/{id}": {
      "get": {
        "tags": ["Centers"],
        "summary": "Gets a single center",
        "description": "Gets a center from the database.",
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The center to retrieve."
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - parameter"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": ["Centers"],
        "summary": "Modifies a center",
        "description": "modifies a center and saves it to the database.",
        "parameters": [{
          "in": "formData",
          "name": "name",
          "type": "string",
          "required": true
        },
        {
          "in": "formData",
          "name": "loaction",
          "type": "string",
          "required": true
        },
        {
          "in": "formData",
          "name": "price",
          "type": "string",
          "format": "number",
          "required": true
        },
        {
          "in": "formData",
          "name": "capacity",
          "type": "string",
          "format": "number",
          "required": true
        },
        {
          "in": "formData",
          "name": "image",
          "type": "file",
          "required": true
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - input or param"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized - must be a admin"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Centers"],
        "summary": "Deletes a center",
        "description": "deletes a center from the database",
        "security": [{
          "UserToken": []
        }],
        "parameters": [{
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "The center to delete.",
          "schema": {
            "$ref": "#/definitions/Center"
          }
        }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - param"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized - must be an admin"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "required": [
        "email",
        "username",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "username": {
          "type": "string",
          "uniqueItems": true
        },
        "password": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        }
      }
    },
    "Event": {
      "required": [
        "title",
        "notes",
        "date",
        "userId",
        "centerId"
      ],
      "properties": {
        "title": {
          "type": "string"
        },
        "notes": {
          "type": "text"
        },
        "date": {
          "type": "dateonly"
        },
        "centerId": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        }
      }
    },
    "Center": {
      "required": [
        "name",
        "location",
        "capacity",
        "price",
        "isAvailable"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "capacity": {
          "type": "integer"
        },
        "price": {
          "type": "float"
        },
        "isAvailable": {
          "type": "boolean"
        }
      }
    }
  }
}
